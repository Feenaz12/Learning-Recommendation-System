# -*- coding: utf-8 -*-
"""recommend.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1F1U_pGZlfGwyiSmOKRbQjpAwEaV-J1n1
"""

# Mount Google Drive (if files saved there)
from google.colab import drive
drive.mount('/content/drive')

# recommend.py

import pandas as pd
import joblib
from sklearn.metrics.pairwise import cosine_similarity
import os

# Paths (update according to your Google Drive)
students_path = "/content/drive/MyDrive/Masai/MASAI-PROJECTS/LRS/students.csv"
courses_path = "/content/drive/MyDrive/Masai/MASAI-PROJECTS/LRS/courses.csv"
models_dir = "/content/drive/MyDrive/Masai/MASAI-PROJECTS/LRS/models/"

# Load data
students = pd.read_csv(students_path)
courses = pd.read_csv(courses_path)

# Load preprocessed vectorizer and matrices
vectorizer = joblib.load(os.path.join(models_dir, "vectorizer.pkl"))
student_matrix = joblib.load(os.path.join(models_dir, "student_matrix.pkl"))
course_matrix = joblib.load(os.path.join(models_dir, "course_matrix.pkl"))

def recommend_courses(student_id, top_n=5):
    """
    Recommend top N courses for a given student_id and display student info.
    """
    # Get the student row
    student = students[students['student_id'] == student_id]
    if student.empty:
        return f"❌ No student found with ID {student_id}"

    # Extract student profile
    student_profile = student['skills'].iloc[0] + " " + student['interests'].iloc[0]
    student_vector = vectorizer.transform([student_profile])

    # Compute similarity with all courses
    similarities = cosine_similarity(student_vector, course_matrix).flatten()
    top_indices = similarities.argsort()[::-1][:top_n]

    # Select top courses
    recommended_courses = courses.iloc[top_indices][['course_id', 'course_name', 'category', 'difficulty']]

    # Display student info
    print(f"🎓 Student: {student['name'].iloc[0]}")
    print(f"📌 Background: {student['background'].iloc[0]}")
    print(f"🛠 Skills: {student['skills'].iloc[0]}")
    print(f"💡 Interests: {student['interests'].iloc[0]}")
    print("\n✅ Recommended Courses:\n")

    return recommended_courses


# Example usage
if __name__ == "__main__":
    student_id = 10
    recommendations = recommend_courses(student_id, top_n=5)

    # Show student info
    student_name = students.loc[students['student_id']==student_id, 'name'].values[0]
    print(f"Recommendations for {student_name} (ID: {student_id}):\n")
    display(recommendations)

#Example usage
student_id = 10
recs = recommend_courses(student_id, top_n=5)
print(recs)

!ls "/content/drive/MyDrive/Masai/MASAI-PROJECTS/LRS/data"

